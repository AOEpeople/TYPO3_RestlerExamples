diff --git a/Classes/Core/Functional/Framework/Frontend/Application.php b/Classes/Core/Functional/Framework/Frontend/Application.php
new file mode 100644
index 0000000..3136dcf
--- /dev/null
+++ b/Classes/Core/Functional/Framework/Frontend/Application.php
@@ -0,0 +1,36 @@
+<?php
+
+namespace TYPO3\TestingFramework\Core\Functional\Framework\Frontend;
+
+/**
+ * Class Application
+ *
+ * Extends the main application because we need our own ServerRequestFactory
+ * to get the body content.
+ *
+ * @package TYPO3\TestingFramework\Core\Functional\Framework\Frontend
+ */
+class Application extends \TYPO3\CMS\Frontend\Http\Application
+{
+    /**
+     * Set up the application and shut it down afterwards
+     *
+     * @param callable $execute
+     */
+    final public function runFromTestingFramework(callable $execute = null)
+    {
+        try {
+            $response = $this->handle(
+                ServerRequestFactory::fromGlobals()
+            );
+            if ($execute !== null) {
+                call_user_func($execute);
+            }
+        } catch (ImmediateResponseException $exception) {
+            $response = $exception->getResponse();
+        }
+
+        $this->sendResponse($response);
+    }
+
+}
\ No newline at end of file
diff --git a/Classes/Core/Functional/Framework/Frontend/InternalRequest.php b/Classes/Core/Functional/Framework/Frontend/InternalRequest.php
index 90bf9b4..74b6cf7 100644
--- a/Classes/Core/Functional/Framework/Frontend/InternalRequest.php
+++ b/Classes/Core/Functional/Framework/Frontend/InternalRequest.php
@@ -61,13 +61,20 @@ class InternalRequest extends Request implements \JsonSerializable
 
     /**
      * @param string|null $uri URI for the request, if any.
+     * @param string $method method to use, GET is default.
+     * @param string|null $content body content to use, if any.
+     * @param array $headers Headers for the message, if any.
      */
-    public function __construct($uri = null) {
+    public function __construct($uri = null, $method = 'GET', string $content = null, array $headers = []) {
         if ($uri === null) {
             $uri = 'http://localhost/';
         }
-        $body = new Stream('php://temp', 'rw');
-        parent::__construct($uri, 'GET', $body);
+        $body = new Stream('php://temp', 'wb+');
+        if (null !== $content) {
+            $body->write($content);
+            $body->rewind();
+        }
+        parent::__construct($uri, $method, $body, $headers);
     }
 
     /**
@@ -201,4 +208,14 @@ class InternalRequest extends Request implements \JsonSerializable
         $parameters[$parameterName] = $value;
         return \GuzzleHttp\Psr7\build_query($parameters);
     }
+
+    public function withHeaders(array $headers): InternalRequest
+    {
+        $target = clone $this;
+        $target->headers = $headers;
+        if (!isset($target->headers['user-agent'])) {
+            $target->headers['user-agent'] = 'TYPO3 Functional Test Request';
+        }
+        return $target;
+    }
 }
diff --git a/Classes/Core/Functional/Framework/Frontend/RequestBootstrap.php b/Classes/Core/Functional/Framework/Frontend/RequestBootstrap.php
index a9eabb7..1eda325 100644
--- a/Classes/Core/Functional/Framework/Frontend/RequestBootstrap.php
+++ b/Classes/Core/Functional/Framework/Frontend/RequestBootstrap.php
@@ -14,6 +14,7 @@ namespace TYPO3\TestingFramework\Core\Functional\Framework\Frontend;
  * The TYPO3 project - inspiring people to share!
  */
 
+use TYPO3\CMS\Core\Configuration\ConfigurationManager;
 use TYPO3\CMS\Core\Utility\ArrayUtility;
 
 /**
@@ -115,7 +116,7 @@ class RequestBootstrap
         $_SERVER['SCRIPT_FILENAME'] = $_SERVER['_'] = $_SERVER['PATH_TRANSLATED'] = $this->requestArguments['documentRoot'] . '/index.php';
         $_SERVER['QUERY_STRING'] = (isset($requestUrlParts['query']) ? $requestUrlParts['query'] : '');
         $_SERVER['REQUEST_URI'] = $requestUrlParts['path'] . (isset($requestUrlParts['query']) ? '?' . $requestUrlParts['query'] : '');
-        $_SERVER['REQUEST_METHOD'] = 'GET';
+        $_SERVER['REQUEST_METHOD'] = $this->request->getMethod();
 
         // Define HTTPS and server port:
         if (isset($requestUrlParts['scheme'])) {
@@ -164,7 +165,16 @@ class RequestBootstrap
                 $GLOBALS,
                 $this->context->getGlobalSettings() ?? []
             );
-            $container->get(\TYPO3\CMS\Frontend\Http\Application::class)->run();
+
+            // we only take the configuration manager from the container
+            $configurationManager = $container->get(ConfigurationManager::class);
+
+            // application is our own version and not knonw to the autloader from the container
+            $application = new Application($configurationManager);
+
+            // simple ->run won't take our request body
+            $application->runFromTestingFramework();
+
             $result['status'] = 'success';
             $result['content'] = static::getContent();
         } catch (\Exception $exception) {
diff --git a/Classes/Core/Functional/Framework/Frontend/ServerRequestFactory.php b/Classes/Core/Functional/Framework/Frontend/ServerRequestFactory.php
new file mode 100644
index 0000000..56c4b69
--- /dev/null
+++ b/Classes/Core/Functional/Framework/Frontend/ServerRequestFactory.php
@@ -0,0 +1,63 @@
+<?php
+
+
+namespace TYPO3\TestingFramework\Core\Functional\Framework\Frontend;
+
+
+use TYPO3\CMS\Core\Http\ServerRequest;
+use TYPO3\CMS\Core\Http\Uri;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+
+/**
+ * Class ServerRequestFactory
+ *
+ * Extends the default ServerRequestFactory because we need the body content
+ * and the headers from the testing framework request which is passed along
+ * in the _SERVER variables.
+ *
+ * @package TYPO3\TestingFramework\Core\Functional\Framework\Frontend
+ */
+class ServerRequestFactory extends \TYPO3\CMS\Core\Http\ServerRequestFactory
+{
+    /**
+     * Create a request from the original superglobal variables.
+     *
+     * @return ServerRequest
+     * @throws \InvalidArgumentException when invalid file values given
+     * @internal Note that this is not public API yet.
+     */
+    public static function fromGlobals()
+    {
+        $serverParameters = $_SERVER;
+        $headers = static::prepareHeaders($serverParameters);
+
+        $method = $serverParameters['REQUEST_METHOD'] ?? 'GET';
+        $uri = new Uri(GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL'));
+
+        $request = new ServerRequest(
+            $uri,
+            $method,
+            $serverParameters['X_TYPO3_TESTING_FRAMEWORK']['request']->getBody(),
+            $serverParameters['X_TYPO3_TESTING_FRAMEWORK']['request']->getHeaders(),
+            $serverParameters,
+            static::normalizeUploadedFiles($_FILES)
+        );
+
+        if (!empty($_COOKIE)) {
+            $request = $request->withCookieParams($_COOKIE);
+        }
+        $queryParameters = GeneralUtility::_GET();
+        if (!empty($queryParameters)) {
+            $request = $request->withQueryParams($queryParameters);
+        }
+        $parsedBody = GeneralUtility::_POST();
+        if (empty($parsedBody) && in_array($method, ['PUT', 'PATCH', 'DELETE'])) {
+            parse_str((string)$_SERVER['X_TYPO3_TESTING_FRAMEWORK']['request']->getBody(), $parsedBody);
+        }
+        if (!empty($parsedBody)) {
+            $request = $request->withParsedBody($parsedBody);
+        }
+        return $request;
+    }
+
+}
\ No newline at end of file
